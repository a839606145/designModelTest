java设计模式有23种：
创建型：
   工厂方法模式：产品有多种，（使用接口 实现表达多个产品） 一个工厂类（使用传入的参数进行创建不同的产品）
  多个工厂方法：将工厂类中的使用参数创建产品，变成直接创建不同产品的方法
  抽象工厂：将一个工厂类变为一个工厂接口，多个实现类，产品使用实现类进行创建
 单例模式：使用内部类，对主类的创建，
 建造者模式：过个工厂方法的改进，不是创建一个 而是创建多个，使用List
 原型模式：实现cloneable 使用objectStream 以及 byteArrayStream 进行深复制
结构型：
适配器模式：类的 对象的 接口的
        类的适配器是指：已经写好一个类 实现了一个方法，此时 又有新的方法了，以前的方法还要，就新建一个接口，里面有两个方法，
                                     用一个类实现这个接口并继承原先的类，这样就能有两个方法了
       对象的适配器：新的类 不继承原先的类，只是含有原先类的实例
       接口的适配器：主要是一个类实现接口的全部方法，其他类就继承这个类
	装饰模式：一个接口，一个实现接口的装饰类，一个实现接口的被装饰类，装饰类含有被装饰类的实例，给接收到的被装饰类装饰
	代理模式：同装饰类似，不同的是代理类（装饰类）不是接收一个对象是在构造方法中创建一个被代理类。
	外观模式：没有接口的概念，就是几个相关的类，各个完成自己的工作，而完成自己的同时要之间互相启动，就用过一个外观类，保留他们的对象，省去他们之间的关联（笔记本 cpu 内存）
	桥接模式：（jdbc桥接器）：连接数据库的一个接口，各个数据库体统提供了各自的方法，一个接口桥，含有连接数据库的数据库接口，可以设置这个是谁，使用他的子类实现具体的方法
	组合模式：（树节点：）一个类Tree 一个类TreeNode Tree中含有TreeNode的list
	享元模式：（连接池）两个类，一个池类，含有链接的list 控制使用的list是哪一个
行为型：父与子之间的   两个类之间  类的状态  中间类
	策略模式：就是有好多实现类，实现了同一个接口，客户根据需要选择哪个类来处理。
	模块方法：大体需求是有一个主方法的结构执行是一样的，里面调用的一些方法 各个类可以自己定义。使用抽象类，
	观察者模式：    观察者接口，不同的实现类实现不同的观察。  被观察者可以添加观察者，删除观察者，然后通知观察者调用方法。
	迭代子模式：一个迭代接口，实现他的类实现遍历集合的过程，含有一个集合对象，接收传过来的集合实体。集合类中 得到自己的迭代类
	责任联模式：一个传一个，一个接口，其他类实现这个接口，一个类中含有一个处理类对象，在统一给方法中实现自己的操作，然后调用处理类对象操作他自己的方法。
 	命令模式：命令接口，实现命令接口的类中，含有接收者对象，发布命令的类，含有命令对象（通过命令 将发布者和接收者连接）（与外观模式 连接对象不一样）
    备忘录模式：还原状态 （一个类 关联 两个类）原始类---》memory类《---备忘录
    状态模式：根据状态的改变，使用不同的方法， 实体类（含有状态对象） 状态类（各个状态的方法） 同时这个状态别人也能看到 所以状态不能在内，使用配置给实体，这个这个状态大家都看到了
    访问者模式：访问者和被访问者 之间使用被访问者通过接收访问者，设置让访问者访问自己。
    中介者模式：中介中含有两个相互关联的类，各个类含有中介的类
  解释器模式：